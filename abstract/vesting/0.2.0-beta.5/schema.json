{
  "contract_name": "cw20-vesting",
  "contract_version": "0.2.0-beta.5",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "default_unlock_schedule",
      "owner",
      "refund_recipient",
      "token"
    ],
    "properties": {
      "default_unlock_schedule": {
        "description": "By default, unlocking starts at init, with a cliff of 12 months and a duration of 12 months. If not specified, all allocations use this default schedule",
        "allOf": [
          {
            "$ref": "#/definitions/Schedule"
          }
        ]
      },
      "owner": {
        "description": "Account which can create new allocations",
        "type": "string"
      },
      "refund_recipient": {
        "description": "Account which will receive refunds upon allocation terminations",
        "type": "string"
      },
      "token": {
        "description": "Address of tokens token",
        "type": "string"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Schedule": {
        "type": "object",
        "required": [
          "cliff",
          "duration",
          "start_time"
        ],
        "properties": {
          "cliff": {
            "description": "Number of seconds starting UST during which no token will be vested/unlocked",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "duration": {
            "description": "Number of seconds taken by tokens to be fully vested",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "start_time": {
            "description": "Timestamp of when vesting is to be started",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Admin function. Update addresses of owner",
        "type": "object",
        "required": [
          "transfer_ownership"
        ],
        "properties": {
          "transfer_ownership": {
            "type": "object",
            "required": [
              "new_owner"
            ],
            "properties": {
              "new_owner": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Admin function. Implementation of cw20 receive msg to create new allocations",
        "type": "object",
        "required": [
          "receive"
        ],
        "properties": {
          "receive": {
            "$ref": "#/definitions/Cw20ReceiveMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Claim withdrawable tokens",
        "type": "object",
        "required": [
          "withdraw"
        ],
        "properties": {
          "withdraw": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Terminates the allocation",
        "type": "object",
        "required": [
          "terminate"
        ],
        "properties": {
          "terminate": {
            "type": "object",
            "required": [
              "user_address"
            ],
            "properties": {
              "user_address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Cw20ReceiveMsg": {
        "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
        "type": "object",
        "required": [
          "amount",
          "msg",
          "sender"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "msg": {
            "$ref": "#/definitions/Binary"
          },
          "sender": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "state"
        ],
        "properties": {
          "state": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "allocation"
        ],
        "properties": {
          "allocation": {
            "type": "object",
            "required": [
              "account"
            ],
            "properties": {
              "account": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "simulate_withdraw"
        ],
        "properties": {
          "simulate_withdraw": {
            "type": "object",
            "required": [
              "account"
            ],
            "properties": {
              "account": {
                "type": "string"
              },
              "timestamp": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "allocation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AllocationInfo",
      "type": "object",
      "required": [
        "canceled",
        "total_amount",
        "vest_schedule",
        "withdrawn_amount"
      ],
      "properties": {
        "canceled": {
          "description": "Indicates if this vesting allo has been canceled",
          "type": "boolean"
        },
        "total_amount": {
          "description": "Total number of tokens tokens allocated to this account",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "unlock_schedule": {
          "description": "Parameters controlling the unlocking process",
          "anyOf": [
            {
              "$ref": "#/definitions/Schedule"
            },
            {
              "type": "null"
            }
          ]
        },
        "vest_schedule": {
          "description": "Parameters controlling the vesting process",
          "allOf": [
            {
              "$ref": "#/definitions/Schedule"
            }
          ]
        },
        "withdrawn_amount": {
          "description": "Number of tokens tokens that have been withdrawn by the beneficiary",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Schedule": {
          "type": "object",
          "required": [
            "cliff",
            "duration",
            "start_time"
          ],
          "properties": {
            "cliff": {
              "description": "Number of seconds starting UST during which no token will be vested/unlocked",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "duration": {
              "description": "Number of seconds taken by tokens to be fully vested",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "start_time": {
              "description": "Timestamp of when vesting is to be started",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "InstantiateMsg",
      "type": "object",
      "required": [
        "default_unlock_schedule",
        "owner",
        "refund_recipient",
        "token"
      ],
      "properties": {
        "default_unlock_schedule": {
          "description": "By default, unlocking starts at init, with a cliff of 12 months and a duration of 12 months. If not specified, all allocations use this default schedule",
          "allOf": [
            {
              "$ref": "#/definitions/Schedule"
            }
          ]
        },
        "owner": {
          "description": "Account which can create new allocations",
          "type": "string"
        },
        "refund_recipient": {
          "description": "Account which will receive refunds upon allocation terminations",
          "type": "string"
        },
        "token": {
          "description": "Address of tokens token",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Schedule": {
          "type": "object",
          "required": [
            "cliff",
            "duration",
            "start_time"
          ],
          "properties": {
            "cliff": {
              "description": "Number of seconds starting UST during which no token will be vested/unlocked",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "duration": {
              "description": "Number of seconds taken by tokens to be fully vested",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "start_time": {
              "description": "Timestamp of when vesting is to be started",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      }
    },
    "simulate_withdraw": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SimulateWithdrawResponse",
      "type": "object",
      "required": [
        "total_tokens_locked",
        "total_tokens_unlocked",
        "total_tokens_vested",
        "withdrawable_amount",
        "withdrawn_amount"
      ],
      "properties": {
        "total_tokens_locked": {
          "description": "Total number of tokens tokens allocated to this account",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "total_tokens_unlocked": {
          "description": "Total number of tokens tokens that have been unlocked till now",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "total_tokens_vested": {
          "description": "Total number of tokens tokens that have been vested till now",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "withdrawable_amount": {
          "description": "Number of tokens tokens that can be withdrawn by the beneficiary post the provided timestamp",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "withdrawn_amount": {
          "description": "Number of tokens tokens that have been withdrawn by the beneficiary",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "state": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "StateResponse",
      "type": "object",
      "required": [
        "remaining_tokens",
        "total_deposited"
      ],
      "properties": {
        "remaining_tokens": {
          "description": "Currently available tokens Tokens",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "total_deposited": {
          "description": "tokens Tokens deposited into the contract",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
